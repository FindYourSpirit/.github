name: Update README

on:
  push:
    branches:
      - 'main'
      - 'master'
  schedule:
    - cron: "0 0 * * *"
     
jobs:
  update-readme:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Install dependencies
        run: npm install

      - name: Fetch latest releases
        id: fetch-releases
        run: |
          npm install @octokit/core fs-extra path

          node -e '
            const { Octokit } = require("@octokit/core");
            const fs = require("fs-extra");
            const path = require("path");

            const octokit = new Octokit();

            const excludedRepos = [".github", "fys-forum"];

            const fetchLatestReleases = async () => {
              try {
                const owner = "FindYourSpirit";
                console.log("Owner:", owner);

                const { data: repositories } = await octokit.request("GET /users/{owner}/repos", {
                  owner,
                });
                console.log("Repositories:", repositories);

                const releases = [];

                for (const repository of repositories) {
                  const repo = repository.name;
                  console.log("Repo:", repo);

                  if (!excludedRepos.includes(repo)) {
                    const { data: releaseData } = await octokit.request("GET /repos/{owner}/{repo}/releases", {
                      owner,
                      repo,
                    });
                    console.log("Release Data:", releaseData);

                    if (releaseData.length > 0) {
                      releases.push(
                        ...releaseData.map((release) => ({
                          repo,
                          platform: "", // Update with the respective platform/ecosystem
                          packageHosting: "", // Update with the respective package hosting
                          tag: release.tag_name,
                          releaseUrl: release.html_url,
                        }))
                      );
                    } else {
                      releases.push({ repo, tag: "No releases found", releaseUrl: "N/A" });
                    }
                  }
                }

                return releases;
              } catch (error) {
                console.error("Error fetching latest releases:", error);
                return [{ repo: "Error", tag: "Error", releaseUrl: "N/A" }];
              }
            };

            const generateTable = (releases) => {
              const tableHeaders = ["SDK", "Platform / Ecosystem", "GitHub Repository", "Package Hosting", "Release"];

              console.log("Table Headers:", tableHeaders);

              const tableRows = releases
                .filter((release) => !excludedRepos.includes(release.repo))
                .map((release) => [
                  release.repo,
                  release.platform || "", // Provide a default value for platform if it is not available
                  `[${release.repo}](https://github.com/FindYourSpirit/${release.repo})`,
                  release.packageHosting || "", // Provide a default value for packageHosting if it is not available
                  `[${release.tag}](${release.releaseUrl})`,
                ]);

              console.log("Table Rows:", tableRows);

              const tableContent = [tableHeaders, ...tableRows]
                .map((row) => `| ${row.join(" | ")} |`)
                .join("\n");

              console.log("Table Content:", tableContent);

              return tableContent;
            };

            (async () => {
              const releases = await fetchLatestReleases();
              const tableContent = generateTable(releases);

              // Write the table content to README.md
              fs.writeFileSync(path.join(process.env.GITHUB_WORKSPACE, "README.md"), tableContent);
            })();
          '
          
      - name: Checkout repo with custom token
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.PAT_TOKEN_CLASSIC }} 

      - name: Update README
        env:
          GITHUB_USERNAME: realTimothyJLos
          GITHUB_EMAIL: loshousehold@gmail.com
          GH_TOKEN: ${{ secrets.PAT_TOKEN_CLASSIC }}
        run: |
          git config --global user.email "${GITHUB_EMAIL}"
          git config --global user.name "${GITHUB_USERNAME}"
          git checkout -b update-readme
          git pull origin main
          git add README.md
          git commit -m "Update README.md" || true
          git remote set-url origin https://github.com/FindYourSpirit/.github.git
          git push origin HEAD:main
          gh pr create --base main --head update-readme --title "Update README" --body "This is the pull request body"
          "This is the pull request body"
