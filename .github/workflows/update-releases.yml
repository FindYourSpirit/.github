name: Update README

on:
  push:
    branches:
      - 'main'
      - 'master'
  schedule:
    - cron: "0 0 * * *"

jobs:
  update-readme:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Install dependencies
        run: npm install

      - name: Fetch latest releases
        id: fetch-releases
        run: |
          npm install @octokit/core markdown-table fs-extra path

          node -e '
            const { Octokit } = require("@octokit/core");
            const { execSync } = require("child_process");
            const fs = require("fs-extra");
            const path = require("path");

            const octokit = new Octokit();

            const excludedRepos = [".github", "fys-forum"];

            const getLatestReleases = async () => {
              const owner = process.env.GITHUB_REPOSITORY.split("/")[0];
              const repo = process.env.GITHUB_REPOSITORY.split("/")[1];

              try {
                const releases = await octokit.request("GET /repos/{owner}/{repo}/releases", {
                  owner,
                  repo,
                });

                if (releases.data.length > 0) {
                  return releases.data.map((release) => ({
                    tag: release.tag_name,
                    date: release.published_at,
                    repo: release.html_url,
                    hosting: getPackageHosting(release),
                  }));
                } else {
                  return [];
                }
              } catch (error) {
                console.error("Error fetching latest releases:", error);
                return [];
              }
            };

            const getPackageHosting = (release) => {
              const { html_url } = release;
              const hosting = {
                npm: "https://www.npmjs.com/package/",
                packagist: "https://packagist.org/packages/",
                pypi: "https://pypi.org/project/",
                nuget: "https://www.nuget.org/packages/",
              };

              for (const [key, value] of Object.entries(hosting)) {
                if (html_url.includes(value)) {
                  return { platform: key, url: html_url.replace(value, "") };
                }
              }

              return { platform: "Unknown", url: html_url };
            };

            const generateTable = (releases) => {
              const tableHeaders = [
                "SDK",
                "Platform / Ecosystem",
                "GitHub Repository",
                "Package Hosting",
                "Latest Release Tag",
                "Latest Release Date",
              ];
              const tableData = releases.map((release) => [
                release.repo.split("/").pop(),
                release.platform,
                `[${release.repo}](${release.repo})`,
                `[${release.hosting.platform}](${release.hosting.url})`,
                release.tag,
                release.date.slice(0, 10),
              ]);

              const table = [tableHeaders, ...tableData];

              return table.map((row) => `| ${row.join(" | ")} |`).join("\\n");
            };

            const updateReadme = async () => {
              const releases = await getLatestReleases();
              const table = generateTable(releases);

              const readmePath = path.join(process.cwd(), ".github", "profile", "README.md");
              const readmeContent = await fs.readFile(readmePath, "utf8");
              const updatedReadme = readmeContent.replace(
                /<!-- START_SDK_RELEASES -->[\s\S]*<!-- END_SDK_RELEASES -->/,
                `<!-- START_SDK_RELEASES -->\\n${table}\\n<!-- END_SDK_RELEASES -->`
              );

              await fs.writeFile(readmePath, updatedReadme, "utf8");
            };

            updateReadme()
              .then(() => {
                console.log("README.md updated successfully.");
              })
              .catch((error) => {
                console.error("Error updating README.md:", error);
                process.exit(1);
              });
          '
