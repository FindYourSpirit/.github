name: Update README

on:
  push:
    branches:
      - 'main'
      - 'master'
  schedule:
    - cron: "0 0 * * *"

jobs:
  update-readme:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Install dependencies
        run: npm install

      - name: Fetch latest releases
        id: fetch-releases
        run: |
          npm install @octokit/core fs-extra path

          node -e '
            const { Octokit } = require("@octokit/core");
            const fs = require("fs-extra");
            const path = require("path");

            const octokit = new Octokit();

            const excludedRepos = [".github", "fys-forum"];

            const getLatestReleases = async () => {
              try {
                const owner = process.env.GITHUB_REPOSITORY.split("/")[0];
                const repo = process.env.GITHUB_REPOSITORY.split("/")[1];
                const releases = await octokit.request("GET /repos/{owner}/{repo}/releases", {
                  owner,
                  repo,
                });

                if (releases.data.length > 0) {
                  return releases.data.map((release) => ({
                    repo,
                    platform: "", // Update with the respective platform/ecosystem
                    packageHosting: "", // Update with the respective package hosting
                    tag: release.tag_name,
                    releaseUrl: release.html_url,
                  }));
                } else {
                  return [{ tag: "No releases found", releaseUrl: "N/A" }];
                }
              } catch (error) {
                console.error("Error fetching latest releases:", error);
                return [{ tag: "Error", releaseUrl: "N/A" }];
              }
            };

            const generateTable = (releases) => {
              const tableHeaders = ["SDK", "Platform / Ecosystem", "GitHub Repository", "Package Hosting", "Release"];

              const tableRows = releases
                .filter((release) => !excludedRepos.includes(release.repo))
                .map((release) => [
                  release.repo,
                  release.platform,
                  `[${release.repo}](https://github.com/FindYourSpirit/${release.repo})`,
                  release.packageHosting,
                  `[${release.tag}](${release.releaseUrl})`,
                ]);

              const tableData = [tableHeaders, ...tableRows];

              return tableData.map((row) => `| ${row.join(" | ")} |`).join("\\n");
            };

            const fetchLatestReleases = async () => {
              const releases = await getLatestReleases();

              const mdTable = generateTable(releases);

              const readmePath = path.join(process.cwd(), ".github", "profile", "README.md");
              await fs.readFile(readmePath, "utf8")
                .then((data) => {
                  const updatedReadme = data.replace(/<!-- START_SDK_RELEASES -->[\s\S]*<!-- END_SDK_RELEASES -->/, `<!-- START_SDK_RELEASES -->\\n${mdTable}\\n<!-- END_SDK_RELEASES -->`);
                  return fs.writeFile(readmePath, updatedReadme, "utf8");
                })
                .catch((error) => {
                  console.error("Error updating README.md:", error);
                  process.exit(1);
                });
            };

            fetchLatestReleases()
              .then(() => {
                console.log("README.md updated successfully.");
              })
              .catch((error) => {
                console.error("Error:", error);
                process.exit(1);
              });
          '
